package data;
import data.Graph;
import data.Graph.node;

public class Pqueue {
	int size = 0;
	int length = 1;
	node queue[] = new node[length];
	
	public void insert(node N) {
		queue[size] = N;
		buildHeap(size);
		size++;
		
		if(size == length)
			doubleLength();
	}
	
	public node getMin() {
		node min;
		if (size != 0)
			min = queue[0];
		else
			min = null;
		queue[0] = queue[size];
		size--;
		heapify(0);
		if(size < length/4)
			halfSize();
		
		return min;
	}

	private void halfSize() {
		node newQ[] = new node[length/2];
		for (int i = 0; i <= size; i++)
			newQ[i] = queue[i];
		queue = newQ;
	}

	private void heapify(int x) {
		int l = leftChild(x);
		int r = rightChild(x);
		int min = x;
		
		if(queue[r].cost < queue[x].cost)
			min = r;
		if(queue[l].cost < queue[min].cost)
			min = l;
		if(min != x) {
			node temp = queue[min];
			queue[min] = queue[x];
			queue[x] = temp;
			heapify(min);
		}
	}

	/*
	 * The queue size increases when the number
	 * elements reach a limit. This process achieves
	 * an amortized linear processing time
	 */
	private void doubleLength() {
		node newQ[] = new node[2*length];
		for (int i = 0; i < length; i++)
			newQ[i] = queue[i];
		length *= 2;
		queue = newQ;
	}

	/*
	 * Classic buildHeap method to enforce heap
	 * property from the leaves to the root 
	 */
	private void buildHeap(int x) {
		int parent = parent(x);
		
		if(queue[x].cost < queue[parent].cost) {
			node temp = queue[x];
			queue[x] = queue[parent];
			queue[parent] = temp;
			buildHeap(parent);
		}
	}

	
	/*
	 * parent, leftChild and rightChild is calculated
	 * based on the value of x
	 */
	private int parent(int x) {
		return (int) Math.floor((x-1)/2);
	}
	
	private int leftChild(int x) {
		return (2*x+1);
	}
	
	private int rightChild(int x) {
		return leftChild(x) + 1;
	}
}
