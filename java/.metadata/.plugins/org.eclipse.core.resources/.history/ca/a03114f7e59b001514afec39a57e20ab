package implement;

import data.Graph;

public class Execute {
	
	/*
	 * generate a map of x*y with possibility of an 
	 * edge = connectivity (actual edges upon total possible)
	 * 0 < connectivity <= 1.0
	 */
	private Graph generateMap(int x, int y, double connectivity) {
		Graph G = new Graph(x,y);
		int edgeCount = (int) ((2*x*y -x -y)*connectivity);
		for (int i = 0; i < edgeCount; i++) {
			int a = (int) (Math.random() * x);
			int b = (int) (Math.random() * y);
			int wt = (int) (Math.random() * 50 + 1);
			int dir = (int) (Math.random() * 4);
			while(!G.addEdge(a,b,dir,wt)){
				a = (int) (Math.random() * x);
				b = (int) (Math.random() * y);
				wt = (int) (Math.random() * 50 + 1);
				dir = (int) (Math.random() * 4);
			}
		}
		
		return G;
	}
	
	public static void main(String args[]) {
		
	}
}
