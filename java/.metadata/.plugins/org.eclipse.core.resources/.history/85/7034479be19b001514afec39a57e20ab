//Jai Sai Ram//
package search;
import data.*;
import data.Graph.node;

public class A_star {
	
	Graph G;
	node target;
	
	//Expected by the execution method
	public void setGraph(Graph G) {
		this.G = G;
	}
	
	public void setTarget(int x, int y) {
		target = G.Map[x][y];
	}
	/*
	 * A* search algorithm that takes as input
	 * x and y variable of the start node in
	 * the Graph structure 'Graph'
	 */
	public int astar(int X, int Y) {
		Pqueue Q = new Pqueue();
		node start = G.Map[X][Y];
		int currentCost = 0;
		
		Q.insert(start);
		start.curCost = 0;
		node current;

		while(Q.size != 0) {
			current = Q.getMin();
			if (current.equals(target))
				return target.cost;
			
			for(int i = 0; i < 4; i++) {
				node neighbour = neighbour(current, i);
				if( currentCost + current.edge[i] > neighbour.curCost) {
					neighbour.curCost = currentCost + current.edge[i];
					neighbour.cost = neighbour.curCost + heuristic(neighbour.x, neighbour.y);
					if(neighbour.discovered)
						Q.update(neighbour);
				}	
			}
		}
		return 0;
	}
	
	/*
	 * i = 0 -> Top
	 * i = 1 -> Left
	 * i = 2 -> Right
	 * i = 3 -> Down
	 */
	private node neighbour(node current, int i) {
		if(i == 0)
			return G.Map[target.x][target.y - 1];
		else if (i == 1)
			return G.Map[target.x - 1][target.y];
		else if (i == 2)
			return G.Map[target.x + 1][target.y];
		else
			return G.Map[target.x][target.y + 1];
	}

	private int heuristic(int x, int y) {
		//Manhattan distance between current and target
		return (target.x - x) + (target.y - y);
	}
}
